# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing 'snip' and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.source.js':
  'Short console message':
    'prefix': 'lo'
    'body': 'console.log(\'$1\');'
  'Console message':
    'prefix': 'log'
    'body': 'console.log(\'$1\', $1);'
  'JSON Console message':
    'prefix': 'logj'
    'body': 'console.log(\'$1\', JSON.stringify($1, null, 2));'
  'Promise console message':
    'prefix': 'plog'
    'body': '.then($1 => console.log(\'$1\', $1) || $1)'
  'import classnames':
    'prefix': 'icl'
    'body': 'import cn from \'classnames\';\n'
  'describe tests':
    'prefix': 'desc'
    'body': 'describe(\'$1\', () => {\n\n});'
  'it test':
    'prefix': 'it'
    'body': 'it(\'$1\', () => {\n\n});'
  'beforeEach':
    'prefix': 'bef'
    'body': 'beforeEach(() => {\n\t$1\n});'
  'new Promise':
    'prefix': 'nPromise'
    'body': 'new Promise((resolve, reject) => {\n$1\n});'
  'async main script':
    'prefix': 'main'
    'body': 'async function main() {\n  $1\n}\n\nmain().catch(console.error)'
  'import styled':
    'prefix': 'istyle'
    'body': 'import styled from \'styled-components\';'
  'export default function':
    'prefix': 'defun'
    'body': 'export default function $1() {\n  $2\n}'
  'import FontAwesomeIcon':
    'prefix': 'ifont'
    'body': 'import { FontAwesomeIcon } from \'@fortawesome/react-fontawesome\';\nimport { $1 } from \'@fortawesome/free-solid-svg-icons\';'

'.source.ts':
  'Short console message':
    'prefix': 'lo'
    'body': 'console.log(\'$1\');'
  'Console message with variable':
    'prefix': 'log'
    'body': 'console.log(\'$1\', $1);'
  'Promise console log':
    'prefix': 'plog'
    'body': '.then($1 => console.log(\'$1\', $1) || $1)'
  'Observable console log':
    'prefix': 'olog'
    'body': '.do($1 => console.log(\'$1\', $1))'
  'TSlint disable max-line-length':
    'prefix': 'tsl'
    'body': '// tslint:disable:max-line-length\n$1// tslint:enable:max-line-length'
  'Jest fn()':
    'prefix': 'jestfn'
    'body': 'jest.fn()'
  'describe tests':
    'prefix': 'desc'
    'body': 'describe(\'$1\', () => {\n\n});'
  'it test':
    'prefix': 'it'
    'body': 'it(\'$1\', () => {\n\n});'
  'it async test':
    'prefix': 'ita'
    'body': 'it(\'$1\', async () => {\n\n});'
  'beforeEach':
    'prefix': 'bef'
    'body': 'beforeEach(() => {\n\t$1\n});'
  'export default function':
    'prefix': 'exportdefaultfunction'
    'body': 'export default function $1() {\n\n}'

'.text.html':
  'Favicon Link':
    'prefix': 'favicon'
    'body': '<link rel="icon" type="image/png" href="/favicon.png">'
  'Viewport':
    'prefix': 'viewport'
    'body': '<meta name="viewport" content="width=device-width, initial-scale=1">'

'.source.scss':
  'Import variables':
    'prefix': 'im'
    'body': '@import \'~styles/variables\';\n'

'.source.python':
  'Print message with variable':
    'prefix': 'pri'
    'body': 'print(\'$1\', $1)'
  'Print message':
    'prefix': 'pr'
    'body': 'print(\'$1\')'

'.source.go':
  'Print message':
    'prefix': 'pr'
    'body': 'fmt.Println("$1")'
  'Print message with string':
    'prefix': 'pri'
    'body': 'fmt.Printf("$1: %s\\\\n", $1)'
  'Print message with decimal':
    'prefix': 'prid'
    'body': 'fmt.Printf("$1: %d\\\\n", $1)'
  'Spew message with variable':
    'prefix': 'pris'
    'body': 'fmt.Printf("$1: %s\\\\n", spew.Sdump($1))'
  'Error check':
    'prefix': 'err'
    'body': 'if err != nil {\n\treturn err\n}'
  'Nil error check':
    'prefix': 'nerr'
    'body': 'if err != nil {\n\treturn nil, err\n}'
  'cmp Diff':
    'prefix': 'ifdif'
    'body': 'if diff := cmp.Diff($1, $2); diff != "" {\n\tt.Errorf("$3 mismatch (-want +got):\\\\n%s", diff)\n}'
  'assert.New':
    'prefix': 'ast'
    'body': 'assert := assert.New(t)\n'
  'Receiver Func':
    'prefix': 'recfunc'
    'body': 'func ($1 *$2) $3($4) $5 {\n\treturn nil\n}'
  'suite template':
    'prefix': 'suitetemp'
    'body': '''
      type $1Suite struct {
      	suite.Suite
      	assert *assert.Assertions
      }

      func Test$1Suite(t *testing.T) {
      	suite.Run(t, new($1Suite))
      }

      func (suite *$1Suite) SetupTest() {
      	suite.assert = assert.New(suite.T())
      }

      func (suite *$1Suite) Test$2() {
      	suite.assert.NotNil(nil)
      }
'''
  'Assert no error':
    'prefix': 'noerr'
    'body': 'suite.assert.NoError(err)'
  'Assert equal':
    'prefix': 'equal'
    'body': 'suite.assert.Equal(${1:expected}, ${2:actual})'
  'Go Magic Date':
    'prefix': 'godate'
    'body': 'Mon Jan 2 15:04:05 MST 2006'
  'Go Magic Date ISO':
    'prefix': 'godateISO'
    'body': '2006-01-02T15:04:05.999Z'
