# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing 'snip' and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.source.js':
  'Short console message':
    'prefix': 'lo'
    'body': 'console.log(\'$1\');'
  'Console message':
    'prefix': 'log'
    'body': 'console.log(\'$1\', $1);'
  'Promise console message':
    'prefix': 'plog'
    'body': '.then($1 => console.log(\'$1\', $1) || $1)'
  'import classnames':
    'prefix': 'icl'
    'body': 'import cn from \'classnames\';\n'
  'import AppComponents':
    'prefix': 'iac'
    'body': 'import $1 from \'AppComponents/$1\';\n'
  'import FormInput':
    'prefix': 'iform'
    'body': 'import $1 from \'AppComponents/FormInputs/$1\';\n'
  'import AppReducers':
    'prefix': 'iar'
    'body': 'import { $2 } from \'AppReducers/$1\';\n'
  'import AppUtils':
    'prefix': 'iau'
    'body': 'import { $2 } from \'AppUtils/$1\';\n'
  'import AppUtils/javascript':
    'prefix': 'ijavascript'
    'body': 'import { $1 } from \'AppUtils/javascript\';\n'
  'import HOC':
    'prefix': 'ihoc'
    'body': 'import $1 from \'AppUtils/HOC/$1\';\n'
  'import connect':
    'prefix': 'iconnnect'
    'body': 'import { connect } from \'react-redux\';\n'
  'import compose':
    'prefix': 'icompose'
    'body': 'import { compose } from \'recompose\';\n'
  'import lifecycle':
    'prefix': 'ilifecycle'
    'body': 'import lifecycle from \'react-pure-lifecycle\';\n'
  'import constants':
    'prefix': 'iconstants'
    'body': 'import { $1 } from \'constants/app\';\n'
  'import style':
    'prefix': 'istyle'
    'body': 'import { $1 } from \'./index.scss\';\n'
  'import proptypes':
    'prefix': 'iprop'
    'body': 'import { $1 } from \'AppUtils/propTypes\';\n'
  'import PropTypes':
    'prefix': 'iPropTypes'
    'body': 'import PropTypes from \'prop-types\';\n'
  'import React':
    'prefix': 'ireact'
    'body': 'import React from \'react\';\n'
  'import Fragment':
    'prefix': 'ifrag'
    'body': 'import React, { Fragment } from \'react\';\n'
  'import logError':
    'prefix': 'ilog'
    'body': 'import { logError } from \'AppUtils/logging\';\n'
  'import Relative':
    'prefix': 'irelative'
    'body': 'import $1 from \'./$1\';\n'
  'import Intl':
    'prefix': 'iintl'
    'body': 'import { FormattedMessage$1 } from \'react-intl\';\n'
  'import metadata':
    'prefix': 'imetadata'
    'body': 'import $1 from \'metadata/$1.json\';\n'
  'import AppApi':
    'prefix': 'iap'
    'body': 'import { $2 } from \'AppApi/$1\';\n'
  'import errorNotificationAction':
    'prefix': 'ierrnotif'
    'body': 'import { errorNotificationAction } from \'AppReducers/notifications\';\n'
  'import addNotificationAction':
    'prefix': 'inotif'
    'body': 'import { addNotificationAction } from \'AppReducers/notifications\';\n'
  'import transformation':
    'prefix': 'itransformation'
    'body': 'import { $1 } from \'AppUtils/transformation\';\n'
  'import materialui icon':
    'prefix': 'imuiicon'
    'body': 'import $1 from \'@material-ui/icons/$1\';\n'
  'describe tests':
    'prefix': 'desc'
    'body': 'describe(\'$1\', () => {\n\n});'
  'it test':
    'prefix': 'it'
    'body': 'it(\'$1\', () => {\n\n});'
  'new Promise':
    'prefix': 'nPromise'
    'body': 'new Promise((resolve, reject) => {\n$1\n});'

'.source.ts':
  'Short console message':
    'prefix': 'lo'
    'body': 'console.log(\'$1\');'
  'Console message with variable':
    'prefix': 'log'
    'body': 'console.log(\'$1\', $1);'
  'Promise console log':
    'prefix': 'plog'
    'body': '.then($1 => console.log(\'$1\', $1) || $1)'
  'Observable console log':
    'prefix': 'olog'
    'body': '.do($1 => console.log(\'$1\', $1))'
  'TSlint disable max-line-length':
    'prefix': 'tsl'
    'body': '// tslint:disable:max-line-length\n$1// tslint:enable:max-line-length'

'.source.scss':
  'Import variables':
    'prefix': 'im'
    'body': '@import \'~styles/variables\';\n'

'.source.python':
  'Print message with variable':
    'prefix': 'pri'
    'body': 'print(\'$1\', $1)'

'.source.go':
  'Print message':
    'prefix': 'pr'
    'body': 'fmt.Println("$1")'
  'Print message with variable':
    'prefix': 'pri'
    'body': 'fmt.Printf("$1: %s\\\\n", $1)'
  'Spew message with variable':
    'prefix': 'pris'
    'body': 'fmt.Printf("$1: %s\\\\n", spew.Sdump($1))'
  'Error check':
    'prefix': 'err'
    'body': 'if err != nil {\n\treturn err\n}'
  'cmp Diff':
    'prefix': 'ifdif'
    'body': 'if diff := cmp.Diff($1, $2); diff != "" {\n\tt.Errorf("$3 mismatch (-want +got):\\\\n%s", diff)\n}'
